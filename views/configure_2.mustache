<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Configure Participants</title>
    <style>
        .main {
            width: 50%;
            margin: 50px auto;
        }

        .hidden {
            display: none;
        }
    </style>

    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css">
</head>

<body>
    <div class="main">
        <h1>Configure Participants</h1>

        {{#running}}
            <p>The process is live and running now.</p>
        {{/running}}

        <h3>Ideation Stage</h3>
        {{^ideationIsFacilitator}}
        <p>Registration will remain open for another <span class="remaining-time">{{ideationRemainingTime}}</span>
            seconds.</p>
        <div>Link to share</div>
        <a class="float-right" target="_blank" href="{{ ideationUrl }}">preview</a>
        <input class="click-to-select" type="text" readonly value="{{ ideationUrl }}">
        {{/ideationIsFacilitator}}

        {{#ideationShowForm}}
            <form action="{{ ideationFormHandler }}" method="post">
                {{> contactable_form }}
                <button class="add-one button button-clear">Add One</button>
                <input class="button float-right" type="submit" value="Submit"></button>
            </form>
        {{/ideationShowForm}}
        {{#ideationShowParticipants}}
            <p>Ready</p>
            <ol>
                {{#ideationParticipants}}
                    <li>type: {{ type }}, id: {{ id }}</li>
                {{/ideationParticipants}}
            </ol>
        {{/ideationShowParticipants}}
        <hr>

        <h3>Reaction Stage</h3>
        {{^reactionIsFacilitator}}
        <p>Registration will remain open for another <span class="remaining-time">{{reactionRemainingTime}}</span>
            seconds.</p>
        <div>Link to share</div>
        <a class="float-right" target="_blank" href="{{ reactionUrl }}">preview</a>
        <input class="click-to-select" type="text" readonly value="{{ reactionUrl }}">
        {{/reactionIsFacilitator}}

        {{#reactionShowForm}}
            <form action="{{ reactionFormHandler }}" method="post">
                {{> contactable_form }}
                <button class="add-one button button-clear">Add One</button>
                <input class="button float-right" type="submit" value="Submit"></button>
            </form>
        {{/reactionShowForm}}
        {{#reactionShowParticipants}}
            <p>Ready</p>
            <ol>
                {{#reactionParticipants}}
                    <li>type: {{ type }}, id: {{ id }}</li>
                {{/reactionParticipants}}
            </ol>
        {{/reactionShowParticipants}}
        <hr>

        <h3>Summary Stage</h3>
        {{^summaryIsFacilitator}}
        <p>Registration will remain open for another <span class="remaining-time">{{summaryRemainingTime}}</span>
            seconds.</p>
        <div>Link to share</div>
        <a class="float-right" target="_blank" href="{{ summaryUrl }}">preview</a>
        <input class="click-to-select" type="text" readonly value="{{ summaryUrl }}">
        {{/summaryIsFacilitator}}

        {{#summaryShowForm}}
            <form action="{{ summaryFormHandler }}" method="post">
                {{> contactable_form }}
                <button class="add-one button button-clear">Add One</button>
                <input class="button float-right" type="submit" value="Submit"></button>
            </form>
        {{/summaryShowForm}}
        {{#summaryShowParticipants}}
            <p>Ready</p>
            <ol>
                {{#summaryParticipants}}
                    <li>type: {{ type }}, id: {{ id }}</li>
                {{/summaryParticipants}}
            </ol>
        {{/summaryShowParticipants}}
    </div>

    <div class="hidden">
        <!-- template -->
        {{> contactable_form }}
    </div>

    <script>
        document.querySelectorAll('.remaining-time').forEach(node => {
            let timeRemaining = parseInt(node.innerText)
            let interval = window.setInterval(() => {
                timeRemaining--
                if (timeRemaining === 0) {
                    node.parentNode.innerText = 'Registration has closed.'
                    window.clearInterval(interval)
                } else {
                    node.innerText = timeRemaining
                }
            }, 1000) // every 1 second
        })

        document.querySelectorAll('.click-to-select').forEach(node => {
            node.addEventListener('click', event => {
                node.focus()
                node.select()
            })
        })

        // add one listeners
        document.querySelectorAll('.add-one').forEach(node => {
            node.addEventListener('click', event => {
                const form = node.parentNode
                const newRow = document.createElement('div')
                newRow.innerHTML = document.querySelector('.hidden .contactable-form-wrapper').outerHTML
                form.insertBefore(document.createElement('hr'), node)
                form.insertBefore(newRow.firstChild, node)
                clearAndSetupContactableFormListeners()
            })
        })

        // form submit listeners
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', async (event) => {
                // dont refresh
                event.preventDefault()
            
                if (event.explicitOriginalTarget.className.includes('add-one')) return

                const configs = []
                const ids = form.querySelectorAll('.id')
                const types = form.querySelectorAll('.type')
                types.forEach((n, index) => {
                    configs.push({
                        type: n.value,
                        id: ids[index].value
                    })
                })
                console.log('configs', configs)
                // submit it
                const res = await fetch(form.action, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    method: 'POST',
                    body: JSON.stringify({ configs })
                })
                
                if (res.status === 200) {
                    form.innerHTML = `
<p>Ready</p>
<ol>
    ${configs.map(c => `<li>type: ${c.type}, id: ${c.id}`)}
</ol>
                    `
                } else {
                    // ?? 
                }
            })
        })

        // from contactable_form.mustache
        clearAndSetupContactableFormListeners()
    </script>
</body>

</html>